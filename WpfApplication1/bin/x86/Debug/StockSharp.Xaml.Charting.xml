<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.Xaml.Charting</name>
    </assembly>
    <members>
        <member name="T:StockSharp.Xaml.Charting.Chart">
            <summary>
            Графический компонент отображения свечных графиков.
            </summary>
            <summary>
            Chart
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IChart">
            <summary>
            Интерфейс для работы с графиком.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IChart.Reset(System.Collections.Generic.IEnumerable{StockSharp.Xaml.Charting.IChartElement})">
            <summary>
            Сбросить отрисованные ранее значения элементов графика.
            </summary>
            <param name="elements">Элементы графика.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IChart.ProcessValues(System.Collections.Generic.IDictionary{System.DateTime,System.Collections.Generic.IDictionary{StockSharp.Xaml.Charting.IChartElement,System.Object}})">
            <summary>
            Обработать новые данные.
            </summary>
            <param name="values">Новые данные.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IChart.Areas">
            <summary>
            Области графика.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IChart.IsAutoScroll">
            <summary>
            Скроллировать автоматически области <see cref="P:StockSharp.Xaml.Charting.IChart.Areas"/> при появлении новых данных. По-умолчанию включено.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.Chart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.Reset(System.Collections.Generic.IEnumerable{StockSharp.Xaml.Charting.IChartElement})">
            <summary>
            Сбросить отрисованные ранее значения элементов графика.
            </summary>
            <param name="elements">Элементы графика.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.ProcessValues(System.Collections.Generic.IDictionary{System.DateTime,System.Collections.Generic.IDictionary{StockSharp.Xaml.Charting.IChartElement,System.Object}})">
            <summary>
            Обработать новые данные.
            </summary>
            <param name="values">Новые данные.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Chart.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.Areas">
            <summary>
            Области графика.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.IsAutoScroll">
            <summary>
            Скроллировать автоматически области <see cref="P:StockSharp.Xaml.Charting.Chart.Areas"/> при появлении новых данных. По-умолчанию выключено.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.ChartTheme">
            <summary>
            Название графической темы.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.ShowOverview">
            <summary>
            Показывать область просмотра.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.CrossHair">
            <summary>
            Перекрестие.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.CrossHairTooltip">
            <summary>
            Показывать подсказку для перекрестия.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.CrossHairAxisLabels">
            <summary>
            Показывать значения на оси для перекрестия.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.AnnotationType">
            <summary>
            Тип аннотации для рисования на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.Chart.OrderCreationMode">
            <summary>
            Режим создания заявок. По умолчанию выключено.
            </summary>
        </member>
        <member name="E:StockSharp.Xaml.Charting.Chart.CreateOrder">
            <summary>
            Событие создания новой заявки.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartAnnotationTypes">
            <summary>
            Типы аннотаций.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.None">
            <summary>
            Отсутствует.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.LineAnnotation">
            <summary>
            Линия.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.LineArrowAnnotation">
            <summary>
            Указатель.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.TextAnnotation">
            <summary>
            Текст.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.BoxAnnotation">
            <summary>
            Область.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.HorizontalLineAnnotation">
            <summary>
            Горизонтальная линия.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAnnotationTypes.VerticalLineAnnotation">
            <summary>
            Вертикальная линия.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartArea">
            <summary>
            Область графика.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartPart`1">
            <summary>
            Базовые класс, описывающий часть графика.
            </summary>
            <typeparam name="T">Тип элемента графика.</typeparam>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Xaml.Charting.ChartPart`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.OnEquals(`0)">
            <summary>
            Сравнить два элемента на эквивалентность.
            </summary>
            <param name="other">Другой элемент, с которым необходимо сравнивать.</param>
            <returns>true, если другой элемент равен текущему, иначе false.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.GetHashCode">
            <summary>
            Рассчитать хеш-код объекта <see cref="T:StockSharp.Xaml.Charting.ChartElement`1"/>.
            </summary>
            <returns>Хеш-код.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.FillClone(`0)">
            <summary>
            Заполнить копию элемента.
            </summary>
            <param name="elem">Копия.</param>
            <returns>Копия.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartPart`1.RaisePropertyChanged(System.String)">
            <summary>
            Вызвать событие <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.
            </summary>
            <param name="name">Название свойства.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartPart`1.Id">
            <summary>
            Уникальный идентификатор.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartArea.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartArea"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartArea.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartArea.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartArea.Clone">
            <summary>
            Создать копию элемента.
            </summary>
            <returns>Копия.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartArea.ToString">
            <summary>
            Получить строковое представление.
            </summary>
            <returns>Строковое представление.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.Title">
            <summary>
            Название области графика.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.AxisValuesPosition">
            <summary>
            Расположить значения оси справа.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.Height">
            <summary>
            Высота области.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.IsAligned">
            <summary>
            Связана ли область с другими на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.Elements">
            <summary>
            Элементы области (<see cref="T:StockSharp.Xaml.Charting.ChartIndicatorElement"/>, <see cref="T:StockSharp.Xaml.Charting.ChartCandleElement"/> и т.д.).
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.XAxises">
            <summary>
            Список горизонтальных осей.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartArea.YAxises">
            <summary>
            Список вертикальных осей.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartAxisAlignment">
            <summary>
            Расположение оси на графике.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisAlignment.Default">
            <summary>
            По умолчанию.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisAlignment.Right">
            <summary>
            Справа.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisAlignment.Left">
            <summary>
            Слева.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisAlignment.Top">
            <summary>
            Сверху.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisAlignment.Bottom">
            <summary>
            Снизу.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartAxisType">
            <summary>
            Тип оси графика.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisType.DateTime">
            <summary>
            Дата и время.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisType.CategoryDateTime">
            <summary>
            Дата и время без разрывов.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartAxisType.Numeric">
            <summary>
            Числовая.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartAxis">
            <summary>
            Ось графика.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartAxis.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartAxis.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.Id">
            <summary>
            Уникальный идентификатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.Title">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.Group">
            <summary>
            Группа.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.AutoRange">
            <summary>
            Автоматический диапазон.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.DrawMinorTicks">
            <summary>
            Показывать дополнительные линии сетки на оси.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.DrawMajorTicks">
            <summary>
            Показывать основные линии сетки на оси.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.DrawMajorGridLines">
            <summary>
            Показывать основные линии сетки.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.DrawMinorGridLines">
            <summary>
            Показывать дополнительные линии сетки.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.DrwaLables">
            <summary>
            Показывать надписи на оси.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.FlipCoordinates">
            <summary>
            Перевернуть координаты.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.TextFormatting">
            <summary>
            Формат надписей.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.AxisAlignment">
            <summary>
            Расположение оси.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartAxis.AxisType">
            <summary>
            Тип оси.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartCandleElement">
            <summary>
            Элемент графика, представляющий свечки.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartElement`1">
            <summary>
            Базовые класс, описывающий элемент графика (индикатор, свечка и т.д.).
            </summary>
            <typeparam name="T">Тип элемента графика.</typeparam>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IChartElement">
            <summary>
            Интерфейс, описывающий элемент графика (индикатор, свечка и т.д.).
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IChartElement.Id">
            <summary>
            Уникальный идентификатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IChartElement.IsLegend">
            <summary>
            Отображать ли легенду на графике.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartElement`1.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Xaml.Charting.ChartElement`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartElement`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartElement`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartElement`1.FillClone(`0)">
            <summary>
            Заполнить копию элемента.
            </summary>
            <param name="elem">Копия.</param>
            <returns>Копия.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartElement`1.IsLegend">
            <summary>
            Отображать ли легенду на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartElement`1.XAxisId">
            <summary>
            Ось X.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartElement`1.YAxisId">
            <summary>
            Ось Y.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartCandleElement.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartCandleElement"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartCandleElement.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartCandleElement.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartCandleElement.Clone">
            <summary>
            Создать копию элемента.
            </summary>
            <returns>Копия.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.Title">
            <summary>
            Заголовок серии, который будет отображаться на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.DownFillColor">
            <summary>
            Цвет тела убывающей свечи.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.UpFillColor">
            <summary>
            Цвет тела возрастающей свечи.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.DownBorderColor">
            <summary>
            Цвет контура убывающей свечи.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.UpBorderColor">
            <summary>
            Цвет контура возрастающей свечи.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartCandleElement.Antialiasing">
            <summary>
            Сглаживание отрисовки свечек(по умолчанию включено).
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartHelper">
            <summary>
            Вспомогательный класс для работы с <see cref="T:StockSharp.Xaml.Charting.MsChart.Chart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.SeriesName(System.String)">
            <summary>
            Получить уникальное имя для серии.
            </summary>
            <param name="prefix">Префикс имени.</param>
            <returns>Уникальное имя.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.ToChartTime(System.DateTime)">
            <summary>
            Перевести время в формате графика.
            </summary>
            <param name="time">Время.</param>
            <returns>Время в формате графика.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.ProcessCandle(StockSharp.Xaml.Charting.IChart,StockSharp.Xaml.Charting.ChartCandleElement,StockSharp.Algo.Candles.Candle)">
            <summary>
            Обработать свечку.
            </summary>
            <param name="chart">График.</param>
            <param name="candleElement">Элемент графика, представляющий свечки.</param>
            <param name="candle">Свечка.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.ProcessValue(StockSharp.Xaml.Charting.IChart,System.DateTime,StockSharp.Xaml.Charting.IChartElement,System.Object)">
            <summary>
            Обработать новые данные.
            </summary>
            <param name="chart">График.</param>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="element">Элемент графика.</param>
            <param name="value">Значение.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.ProcessValues(StockSharp.Xaml.Charting.IChart,System.DateTime,System.Collections.Generic.IDictionary{StockSharp.Xaml.Charting.IChartElement,System.Object})">
            <summary>
            Обработать новые данные.
            </summary>
            <param name="chart">График.</param>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="values">Новые данные.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.SaveToXml(StockSharp.Xaml.Charting.IChart,System.String)">
            <summary>
            Сохранить данные графика в xml файл.
            </summary>
            <param name="chart">График.</param>
            <param name="fileName">Полный путь к файлу.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.SaveToImage(StockSharp.Xaml.Charting.IChart,System.String)">
            <summary>
            Сохранить график в изображение.
            </summary>
            <param name="chart">График.</param>
            <param name="fileName">Полный путь к файлу.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.GetArea(StockSharp.Xaml.Charting.Chart,System.Int32)">
            <summary>
            Вернуть область по указанному индексу. Если областей меньше, то недостающие будут созданы автоматически.
            </summary>
            <param name="chart">График.</param>
            <param name="index">Индекс области.</param>
            <returns>Область.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.GetChart(StockSharp.Algo.Strategies.Strategy)">
            <summary>
            Получить график, ассоциированный с переданной стратегией.
            </summary>
            <param name="strategy">Стратегия.</param>
            <returns>График.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.SetChart(StockSharp.Algo.Strategies.Strategy,StockSharp.Xaml.Charting.IChart)">
            <summary>
            Установить график для стратегии.
            </summary>
            <param name="strategy">Стратегия.</param>
            <param name="chart">График.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartHelper.SetTitle(StockSharp.Xaml.Charting.ChartCandleElement,StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            Установить заголовок для элемента.
            </summary>
            <param name="element">Элемент.</param>
            <param name="series">Серия свечек.</param>
            <returns>Элемент.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles">
            <summary>
            Стили отрисовки графика индикатора.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.Line">
            <summary>
            Линия.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.NoGapLine">
            <summary>
            Линия без разрывов.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.StepLine">
            <summary>
            Ступенчатая линия.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.Band">
            <summary>
            Диапазон.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.Dot">
            <summary>
            Точки.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.Histogram">
            <summary>
            Гистограмма.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.Bubble">
            <summary>
            Пузырь.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles.StackedBar">
            <summary>
            Штабельная диаграмма.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartIndicatorElement">
            <summary>
            Элемент графика, представляющий индикатор.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorElement.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartIndicatorElement"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorElement.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorElement.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorElement.Clone">
            <summary>
            Создать копию элемента.
            </summary>
            <returns>Копия.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorElement.ToString">
            <summary>
            Получить строковое представление.
            </summary>
            <returns>Строковое представление.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.Indicator">
            <summary>
            Индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.Title">
            <summary>
            Заголовок индикатора, который будет отображаться на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.ToolTip">
            <summary>
            Подсказка для индикатора на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.Color">
            <summary>
            Цвет линии (бара и т.д.), которой будет рисоваться на графике индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.AdditionalColor">
            <summary>
            Дополнительный цвет линии (бара и т.д.), которой будет рисоваться на графике индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.StrokeThickness">
            <summary>
            Толщина линии (бара и т.д.), с которой будет рисоваться индикатор на графике.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.IndicatorPainter">
            <summary>
            Рендерер индикатора.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.DrawStyle">
            <summary>
            Стиль отрисовки индиктора.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.DrawTemplate">
            <summary>
            Шаблон отрисовки для Dot стиля <see cref="T:StockSharp.Xaml.Charting.ChartIndicatorDrawStyles"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorElement.Antialiasing">
            <summary>
            Сглаживание отрисовки индикатора.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartIndicatorValue">
            <summary>
            Графическое значение индикатора, содержащее в себе информацию о сформированности индикатора <see cref="P:StockSharp.Xaml.Charting.ChartIndicatorValue.IsFormed"/> и его значение <see cref="P:StockSharp.Xaml.Charting.ChartIndicatorValue.Value"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator)">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartIndicatorValue"/>.
            </summary>
            <param name="indicator">Индикатор.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,System.Decimal)">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartIndicatorValue"/>.
            </summary>
            <param name="indicator">Индикатор.</param>
            <param name="value">Значение индикатора.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorValue.#ctor(StockSharp.Algo.Indicators.IIndicator,StockSharp.Algo.Indicators.IIndicatorValue)">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.ChartIndicatorValue"/>.
            </summary>
            <param name="indicator">Индикатор.</param>
            <param name="value">Значение индикатора.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartIndicatorValue.ToString">
            <summary>
            Получить строковое представление.
            </summary>
            <returns>Строковое представление.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorValue.Indicator">
            <summary>
            Индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorValue.Value">
            <summary>
            Значение индикатора.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartIndicatorValue.IsFormed">
            <summary>
            Сформирован ли индикатор.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartOrderElement">
            <summary>
            Элемент графика, представляющий заявки.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartTransactionElement`1">
            <summary>
            Базовые класс, описывающий элемент графика Заявки или Сделки.
            </summary>
            <typeparam name="T">Тип элемента.</typeparam>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartTransactionElement`1.#ctor">
            <summary>
            Инициализировать <see cref="T:StockSharp.Xaml.Charting.ChartTransactionElement`1"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartTransactionElement`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartTransactionElement`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartTransactionElement`1.FillClone(`0)">
            <summary>
            Заполнить копию элемента.
            </summary>
            <param name="elem">Копия.</param>
            <returns>Копия.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.ChartTransactionElement`1.Clone">
            <summary>
            Создать копию элемента.
            </summary>
            <returns>Копия.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartTransactionElement`1.BuyColor">
            <summary>
            Цвет графического элемента на графике, обозначающий покупку.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartTransactionElement`1.BuyStrokeColor">
            <summary>
            Цвет границы графического элемента на графике, обозначающий покупку.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartTransactionElement`1.SellColor">
            <summary>
            Цвет графического элемента на графике, обозначающий продажу.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.ChartTransactionElement`1.SellStrokeColor">
            <summary>
            Цвет границы графического элемента на графике, обозначающий продажу.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.ChartTradeElement">
            <summary>
            Элемент графика, представляющий сделки.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.EquityCurveChart">
            <summary>
            Графический компонент отображения кривой эквити.
            </summary>
            <summary>
            EquityCurveChart
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.EquityCurveChart.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.EquityCurveChart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.EquityCurveChart.CreateCurve(System.String,System.Windows.Media.Color)">
            <summary>
            Создать новую кривую для отрисовки доходности.
            </summary>
            <param name="title">Заголовок кривой.</param>
            <param name="color">Цвет кривой.</param>
            <returns>Коллекция с данными, которую необходимо заполнять для отрисовки кривой.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.EquityCurveChart.RemoveCurve(System.Collections.Generic.ICollection{StockSharp.Xaml.Charting.EquityData})">
            <summary>
            Удалить кривую доходности с графика.
            </summary>
            <param name="items">Коллекция с данными, полученная из метода <see cref="M:StockSharp.Xaml.Charting.EquityCurveChart.CreateCurve(System.String,System.Windows.Media.Color)"/>.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.EquityCurveChart.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.EquityCurveChart.EquityStyle">
            <summary>
            Стиль отрисовки кривой эквити. По-умолчанию установлен <see cref="F:StockSharp.Xaml.Charting.EquityCurveChartStyles.Line"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.EquityCurveChart.NoGapMode">
            <summary>
            Убирать разрывы (выходные, праздники) на графике. При включенном режиме и использовании нескольких кривых 
            потеряется совместное масштабирование. По умолчанию включено.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.EquityCurveChartStyles">
            <summary>
            Cтили отрисовки графика кривой эквити.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.EquityCurveChartStyles.Area">
            <summary>
            Отрисовка графика в виде закрашенной области.
            </summary>
        </member>
        <member name="F:StockSharp.Xaml.Charting.EquityCurveChartStyles.Line">
            <summary>
            Отрисовка графика в виде линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.EquityData">
            <summary>
             Данные по эквити.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.EquityData.Time">
            <summary>
             Отметка времени, в которое значение эквити было равным <see cref="P:StockSharp.Xaml.Charting.EquityData.Value"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.EquityData.Value">
            <summary>
             Значение эквити.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.Extensions">
            <summary>
            Вспомогательный класс.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.Extensions.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.DrawHandler">
            <summary>
            Описание метода отрисовки значения на графике.
            </summary>
            <param name="indicator">Индикатор.</param>
            <param name="shift">Смещение.</param>
            <param name="values">Значения.</param>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IChartIndicatorPainter">
            <summary>
            Интерфейс, описывающий рендерер индикатора на графике (например, линии, гистограммы и т.д.).
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IChartIndicatorPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IChartIndicatorPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IChartIndicatorPainter.Indicator">
            <summary>
            Элемент графика, представляющий индикатор.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Williams.Alligator"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1">
            <summary>
            Базовый класс рендерера индикатора на графике (например, линии, гистограммы и т.д.).
            </summary>
            <typeparam name="T">Тип индикатора.</typeparam>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.GetSeriesName">
            <summary>
            Получить уникальное имя для серии.
            </summary>
            <returns>Уникальное имя.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.ToString">
            <summary>
            Получить строковое представление.
            </summary>
            <returns>Строковое представление.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.IndicatorSeries">
            <summary>
            Элементы графика, представляющие вложенные индикаторы.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.StockSharp#Xaml#Charting#IChartIndicatorPainter#Indicator">
            <summary>
            Элемент графика, представляющий индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.Indicator">
            <summary>
            Индикатор.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BaseChartIndicatorPainter`1.BaseElement">
            <summary>
            Элемент графика, представляющий индикатор.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.LipsColor">
            <summary>
            Цвет Lips линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.TeethColor">
            <summary>
            Цвет Teeth линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter.JawColor">
            <summary>
            Цвет Jaw линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Oscillator.AverageDirectionalIndex"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.DxPlusColor">
            <summary>
            Цвет DI+ линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.DiMinusColor">
            <summary>
            Цвет DI- линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter.AdxColor">
            <summary>
            Цвет ADX линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.BollingerBands"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.UpBandColor">
            <summary>
            Цвет верхней полосы индикатора.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.LowBandColor">
            <summary>
            Цвет нижней полосы индикатора.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter.MovingAverageColor">
            <summary>
            Цвет средней линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Williams.Fractals"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.UpColor">
            <summary>
            Цвет Up линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter.DownColor">
            <summary>
            Цвет Down линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Oscillator.Ichimoku"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.TenkanColor">
            <summary>
            Цвет Tenkan линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.KijunColor">
            <summary>
            Цвет Kijun линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.SenkouAColor">
            <summary>
            Цвет SenkouA линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.SenkouBColor">
            <summary>
            Цвет SenkouA линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter.ChinkouColor">
            <summary>
            Цвет Chinkou линии.
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceHistogramPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.MovingAverageConvergenceDivergenceHistogram"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceHistogramPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceHistogramPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceSignalPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.MovingAverageConvergenceDivergenceSignal"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceSignalPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceSignalPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.PeakPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.Peak"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.PeakPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.PeakPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.TroughPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.Trough"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.TroughPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.TroughPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Misc.VolumeIndicator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.UpColor">
            <summary>
            Цвет Up линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.DownColor">
            <summary>
            Цвет Down линии.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.BubbleAutoScale">
            <summary>
            Использовать автоматическое масштабирование для режима \"Пузырь\".
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter.BubbleScale">
            <summary>
            Ручной масштаб для режима "Пузырь".
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.VolumeProfilePainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Misc.VolumeProfileIndicator"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumeProfilePainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.VolumeProfilePainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagEquisPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.ZigZagEquis"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagEquisPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagEquisPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagPainter">
            <summary>
            Рендерер для <see cref="T:StockSharp.Algo.Indicators.Trend.ZigZag"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagPainter.Init(System.String,System.Boolean)">
            <summary>
            Инициализировать рендерер.
            </summary>
            <param name="areaName">Название области.</param>
            <param name="isIndexed">Индексирована ли область.</param>
            <returns>Графические данные.</returns>
        </member>
        <member name="M:StockSharp.Xaml.Charting.IndicatorPainters.ZigZagPainter.ProcessValues(System.DateTime,StockSharp.Xaml.Charting.ChartIndicatorValue,StockSharp.Xaml.Charting.DrawHandler)">
            <summary>
            Обработать новые значения.
            </summary>
            <param name="time">Временная отметка формирования новых данных.</param>
            <param name="value">Значения индикатора.</param>
            <param name="draw">Метод отрисовки значения на графике.</param>
            <returns>Новые значения для отображения на графике.</returns>
        </member>
        <member name="T:StockSharp.Xaml.Charting.MsChart.Chart">
            <summary>
            Графический компонент отображения свечных графиков.
            </summary>
            <summary>
            Chart
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.Xaml.Charting.MsChart.Chart"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.Reset(System.Collections.Generic.IEnumerable{StockSharp.Xaml.Charting.IChartElement})">
            <summary>
            Сбросить отрисованные ранее значения элементов графика.
            </summary>
            <param name="elements">Элементы графика.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.ProcessValues(System.Collections.Generic.IDictionary{System.DateTime,System.Collections.Generic.IDictionary{StockSharp.Xaml.Charting.IChartElement,System.Object}})">
            <summary>
            Обработать новые данные.
            </summary>
            <param name="values">Новые данные.</param>
        </member>
        <member name="M:StockSharp.Xaml.Charting.MsChart.Chart.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.IsIndexed">
            <summary>
            Индексированы ли данные. По-умолчанию включено.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.Areas">
            <summary>
            Области графика.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.BackColor">
            <summary>
            Фон графика для начала градиента.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.BackSecondaryColor">
            <summary>
            Фон графика для окончания градиента.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.BackGradientStyle">
            <summary>
            Стиль градиента для фона.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.MsChart.Chart.IsAutoScroll">
            <summary>
            Скроллировать автоматически области <see cref="P:StockSharp.Xaml.Charting.MsChart.Chart.Areas"/> при появлении новых данных. По-умолчанию включено.
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartAnnotationEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartAnnotationModifier.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartBuyMarkerAnnotation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartCursorModifier.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.SciChart.SciChartPaneViewModel.SciChartCandles">
            <summary>
            Элемент графика - серия свечек
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.SciChart.SciChartPaneViewModel.SciChartIndicator">
            <summary>
            Элемент графика - индикатор
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.SciChart.SciChartPaneViewModel.SciChartTrades">
            <summary>
            Элемент графика - трейды
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.SciChart.SciChartPaneViewModel.SciChartOrders">
            <summary>
            Элемент графика - ордера
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartLegend.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:StockSharp.Xaml.Charting.SciChart.SciChartOverviewExtensions">
            <summary>
            uses this technique
            http://stackoverflow.com/questions/10279092/how-to-get-child-by-type-in-wpf-container
            
            and this technique
            http://social.msdn.microsoft.com/Forums/vstudio/en-US/b879f391-f350-4813-b509-b725dc1668b1/how-to-find-datatemplate-generated-element-in-an-itemscontrol?forum=wpf
            
            to bind the SciChartSurface at the first child in an ItemsControl as the ParentSurface on a SciChartOverview
            </summary>
        </member>
        <member name="M:StockSharp.Xaml.Charting.SciChart.SciChartSellMarkerAnnotation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.SciChart.SciChartViewModel.MinimumRange">
            <summary>
            Минимальное кол-во видимых свечек.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.SciChart.SciChartViewRange.CategoryDateTimeRange">
            <summary>
            Видимый диапазон для CategoryDateTimeAxis.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.SciChart.SciChartViewRange.DateTimeRange">
            <summary>
            Видимый диапазон для DateTimeAxis.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.SciChart.SciChartViewRange.NumericRange">
            <summary>
            Видимый диапазон для NumericAxis.
            </summary>
        </member>
        <member name="P:StockSharp.Xaml.Charting.SciChart.SciChartViewRange.Type">
            <summary>
            Тип диапазона.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
